{"version":3,"sources":["Number.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["Number","onClick","props","callback","number","className","this","React","Component","Grid","childCallback","value","result","operators","includes","setState","old_text","state","text","operator","old_val","parseFloat","new_val","id","async","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07a2e244.chunk.js","sourcesContent":["import React from 'react';\nclass Number extends React.Component {\n    onClick = () => {\n        this.props.callback(`${this.props.number}`);\n    }\n\n    render() {\n        return (\n            <div className=\"Number\" onClick={this.onClick}>\n                <h2>{this.props.number}</h2>\n            </div>\n        )\n    }\n}\nexport default Number;","import React from 'react';\nimport './Grid.css'\nimport Number from './Number.js'\n// import Button from '@material-ui/core/Button';\n\nclass Grid extends React.Component {\n\n    childCallback = (value) => {\n        // Lets collect the resulting text value into a variable first for ease of reading and use\n        var result = \"\";\n        if (value === 'C') {/** Everything will be taken care of by not doing anything :) */ }\n        else if (this.operators.includes(value)) {\n            /** This is to know if an operator is used, save the current number in memory and also the operator\n             *  Present the user with a clean space to enter second part of the equation.\n             */\n            this.setState({ old_text: this.state.text, operator: value });\n        }\n        else if (value === '=') {\n\n            // Parse out the state variables into easy to use variables\n            var old_val = parseFloat(this.state.old_text);\n            var new_val = parseFloat(this.state.text);\n            var operator = this.state.operator;\n\n\n\n            // Handle the basic operators\n            if (operator === '+') { result = (old_val + new_val) }\n            else if (operator === '-') { result = (old_val - new_val) }\n            else if (operator === '*') { result = (old_val * new_val) }\n            else if (operator === '/') { result = new_val === 0.0 ? 0.0 : (old_val / new_val) }\n\n            // Reset everything since a calculation is fully complete\n            this.setState({ old_text: \"\", operator: \"\" });\n        }\n        else {\n            result = this.state.text + value;\n        }\n\n        this.setState({ text: result });\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.operators = [\"+\", \"-\", \"/\", \"*\"];\n    }\n\n    componentDidMount() {\n        this.setState({ text: \"\", old_text: \"\", operator: \"\" });\n    }\n\n\n    render() {\n        return (\n            <div className=\"Grid\">\n\n                <div className=\"RowContainer\">\n                    <div className=\"Row\">\n                        <div className=\"ResultTextContainer\">\n                            <div className=\"ResultText\" >{this.state.text}</div>\n                            <Number number=\"=\" callback={this.childCallback} />\n                        </div>\n                    </div>\n                    <div className=\"Row\">\n                        <Number number=\"/\" callback={this.childCallback} />\n                        <Number number=\"*\" callback={this.childCallback} />\n                        <Number number=\"-\" callback={this.childCallback} />\n                        <Number number=\"+\" callback={this.childCallback} />\n                    </div>\n                    <div className=\"Row\">\n                        <Number number={7} callback={this.childCallback} />\n                        <Number number={8} callback={this.childCallback} />\n                        <Number number={9} callback={this.childCallback} />\n                        <Number number=\"C\" callback={this.childCallback} />\n                    </div>\n                    <div className=\"Row\">\n                        <Number number={4} callback={this.childCallback} />\n                        <Number number={5} callback={this.childCallback} />\n                        <Number number={6} callback={this.childCallback} />\n                        <Number number=\".\" callback={this.childCallback} />\n                    </div>\n                    <div className=\"Row\">\n                        <Number number={1} callback={this.childCallback} />\n                        <Number number={2} callback={this.childCallback} />\n                        <Number number={3} callback={this.childCallback} />\n                        <Number number={0} callback={this.childCallback} />\n\n                    </div>\n\n                </div>\n                <script id=\"__bs_script__\">\n                    <script async src='http://localhost:3002/browser-sync/browser-sync-client.js?v=2.26.12'></script>\n                </script>\n            </div>\n\n        )\n    }\n}\nexport default Grid;","import React from 'react';\nimport './App.css';\nimport Grid from './Grid.js';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}